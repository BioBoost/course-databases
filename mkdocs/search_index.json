{
    "docs": [
        {
            "location": "/",
            "text": "Databases overview\n\n\n\n\n\n\nDatabases overview",
            "title": "Home"
        },
        {
            "location": "/#databases-overview",
            "text": "Databases overview",
            "title": "Databases overview"
        },
        {
            "location": "/mysql-introduction/",
            "text": "MySQL introduction\n\n\nSHOW DATABASES\n\n\n\n\n+--------------------+\n| Database           |\n+--------------------+\n| demo               |\n| employees          |\n| information_schema |\n| mydb               |\n| mysql              |\n| performance_schema |\n| phpmyadmin         |\n| test               |\n+--------------------+\n8 rows in set (0.00 sec)\n\n\n\n\nUSE employees;\n\n\n\n\nDatabase changed\n\n\n\n\nSHOW TABLES;\n\n\n\n\n+----------------------+\n| Tables_in_employees  |\n+----------------------+\n| current_dept_emp     |\n| departments          |\n| dept_emp             |\n| dept_emp_latest_date |\n| dept_manager         |\n| employees            |\n| salaries             |\n| titles               |\n+----------------------+\n8 rows in set (0.00 sec)\n\n\n\n\nSHOW COLUMNS FROM employees;\n\n\n\n\n+------------+---------------+------+-----+---------+-------+\n| Field      | Type          | Null | Key | Default | Extra |\n+------------+---------------+------+-----+---------+-------+\n| emp_no     | int(11)       | NO   | PRI | NULL    |       |\n| birth_date | date          | NO   |     | NULL    |       |\n| first_name | varchar(14)   | NO   |     | NULL    |       |\n| last_name  | varchar(16)   | NO   |     | NULL    |       |\n| gender     | enum('M','F') | NO   |     | NULL    |       |\n| hire_date  | date          | NO   |     | NULL    |       |\n+------------+---------------+------+-----+---------+-------+\n6 rows in set (0.01 sec)",
            "title": "MySQL introduction"
        },
        {
            "location": "/mysql-introduction/#mysql-introduction",
            "text": "SHOW DATABASES  +--------------------+\n| Database           |\n+--------------------+\n| demo               |\n| employees          |\n| information_schema |\n| mydb               |\n| mysql              |\n| performance_schema |\n| phpmyadmin         |\n| test               |\n+--------------------+\n8 rows in set (0.00 sec)  USE employees;  Database changed  SHOW TABLES;  +----------------------+\n| Tables_in_employees  |\n+----------------------+\n| current_dept_emp     |\n| departments          |\n| dept_emp             |\n| dept_emp_latest_date |\n| dept_manager         |\n| employees            |\n| salaries             |\n| titles               |\n+----------------------+\n8 rows in set (0.00 sec)  SHOW COLUMNS FROM employees;  +------------+---------------+------+-----+---------+-------+\n| Field      | Type          | Null | Key | Default | Extra |\n+------------+---------------+------+-----+---------+-------+\n| emp_no     | int(11)       | NO   | PRI | NULL    |       |\n| birth_date | date          | NO   |     | NULL    |       |\n| first_name | varchar(14)   | NO   |     | NULL    |       |\n| last_name  | varchar(16)   | NO   |     | NULL    |       |\n| gender     | enum('M','F') | NO   |     | NULL    |       |\n| hire_date  | date          | NO   |     | NULL    |       |\n+------------+---------------+------+-----+---------+-------+\n6 rows in set (0.01 sec)",
            "title": "MySQL introduction"
        },
        {
            "location": "/retreiving-data/",
            "text": "Retreiving data\n\n\nSELECT prod_name FROM products;\n\n\n\n\n+----------------+\n| prod_name      |\n+----------------+\n| .5 ton anvil   |\n| 1 ton anvil    |\n| 2 ton anvil    |\n| Detonator      |\n| Bird seed      |\n| Carrots        |\n| Fuses          |\n| JetPack 1000   |\n| JetPack 2000   |\n| Oil can        |\n| Safe           |\n| Sling          |\n| TNT (1 stick)  |\n| TNT (5 sticks) |\n+----------------+\n14 rows in set (0.00 sec)\n\n\n\n\nSELECT prod_id, prod_name, prod_price FROM products;\n\n\n\n\n+---------+----------------+------------+\n| prod_id | prod_name      | prod_price |\n+---------+----------------+------------+\n| ANV01   | .5 ton anvil   |       5.99 |\n| ANV02   | 1 ton anvil    |       9.99 |\n| ANV03   | 2 ton anvil    |      14.99 |\n| DTNTR   | Detonator      |      13.00 |\n| FB      | Bird seed      |      10.00 |\n| FC      | Carrots        |       2.50 |\n| FU1     | Fuses          |       3.42 |\n| JP1000  | JetPack 1000   |      35.00 |\n| JP2000  | JetPack 2000   |      55.00 |\n| OL1     | Oil can        |       8.99 |\n| SAFE    | Safe           |      50.00 |\n| SLING   | Sling          |       4.49 |\n| TNT1    | TNT (1 stick)  |       2.50 |\n| TNT2    | TNT (5 sticks) |      10.00 |\n+---------+----------------+------------+\n14 rows in set (0.00 sec)\n\n\n\n\nSELECT * FROM products;\n\n\n\n\n+---------+---------+----------------+------------+----------------------------------------------------------------+\n| prod_id | vend_id | prod_name      | prod_price | prod_desc                                                      |\n+---------+---------+----------------+------------+----------------------------------------------------------------+\n| ANV01   |    1001 | .5 ton anvil   |       5.99 | .5 ton anvil, black, complete with handy hook                  |\n| ANV02   |    1001 | 1 ton anvil    |       9.99 | 1 ton anvil, black, complete with handy hook and carrying case |\n| ANV03   |    1001 | 2 ton anvil    |      14.99 | 2 ton anvil, black, complete with handy hook and carrying case |\n| DTNTR   |    1003 | Detonator      |      13.00 | Detonator (plunger powered), fuses not included                |\n| FB      |    1003 | Bird seed      |      10.00 | Large bag (suitable for road runners)                          |\n| FC      |    1003 | Carrots        |       2.50 | Carrots (rabbit hunting season only)                           |\n| FU1     |    1002 | Fuses          |       3.42 | 1 dozen, extra long                                            |\n| JP1000  |    1005 | JetPack 1000   |      35.00 | JetPack 1000, intended for single use                          |\n| JP2000  |    1005 | JetPack 2000   |      55.00 | JetPack 2000, multi-use                                        |\n| OL1     |    1002 | Oil can        |       8.99 | Oil can, red                                                   |\n| SAFE    |    1003 | Safe           |      50.00 | Safe with combination lock                                     |\n| SLING   |    1003 | Sling          |       4.49 | Sling, one size fits all                                       |\n| TNT1    |    1003 | TNT (1 stick)  |       2.50 | TNT, red, single stick                                         |\n| TNT2    |    1003 | TNT (5 sticks) |      10.00 | TNT, red, pack of 10 sticks                                    |\n+---------+---------+----------------+------------+----------------------------------------------------------------+\n14 rows in set (0.00 sec)\n\n\n\n\n-SELECT vend_id FROM products;\n\n\n\n\n+---------+\n| vend_id |\n+---------+\n|    1001 |\n|    1001 |\n|    1001 |\n|    1002 |\n|    1002 |\n|    1003 |\n|    1003 |\n|    1003 |\n|    1003 |\n|    1003 |\n|    1003 |\n|    1003 |\n|    1005 |\n|    1005 |\n+---------+\n14 rows in set (0.00 sec)\n\n\n\n\nSELECT DISTINCT vend_id FROM products;\n\n\n\n\n+---------+\n| vend_id |\n+---------+\n|    1001 |\n|    1002 |\n|    1003 |\n|    1005 |\n+---------+\n4 rows in set (0.00 sec)",
            "title": "Retreiving data"
        },
        {
            "location": "/retreiving-data/#retreiving-data",
            "text": "SELECT prod_name FROM products;  +----------------+\n| prod_name      |\n+----------------+\n| .5 ton anvil   |\n| 1 ton anvil    |\n| 2 ton anvil    |\n| Detonator      |\n| Bird seed      |\n| Carrots        |\n| Fuses          |\n| JetPack 1000   |\n| JetPack 2000   |\n| Oil can        |\n| Safe           |\n| Sling          |\n| TNT (1 stick)  |\n| TNT (5 sticks) |\n+----------------+\n14 rows in set (0.00 sec)  SELECT prod_id, prod_name, prod_price FROM products;  +---------+----------------+------------+\n| prod_id | prod_name      | prod_price |\n+---------+----------------+------------+\n| ANV01   | .5 ton anvil   |       5.99 |\n| ANV02   | 1 ton anvil    |       9.99 |\n| ANV03   | 2 ton anvil    |      14.99 |\n| DTNTR   | Detonator      |      13.00 |\n| FB      | Bird seed      |      10.00 |\n| FC      | Carrots        |       2.50 |\n| FU1     | Fuses          |       3.42 |\n| JP1000  | JetPack 1000   |      35.00 |\n| JP2000  | JetPack 2000   |      55.00 |\n| OL1     | Oil can        |       8.99 |\n| SAFE    | Safe           |      50.00 |\n| SLING   | Sling          |       4.49 |\n| TNT1    | TNT (1 stick)  |       2.50 |\n| TNT2    | TNT (5 sticks) |      10.00 |\n+---------+----------------+------------+\n14 rows in set (0.00 sec)  SELECT * FROM products;  +---------+---------+----------------+------------+----------------------------------------------------------------+\n| prod_id | vend_id | prod_name      | prod_price | prod_desc                                                      |\n+---------+---------+----------------+------------+----------------------------------------------------------------+\n| ANV01   |    1001 | .5 ton anvil   |       5.99 | .5 ton anvil, black, complete with handy hook                  |\n| ANV02   |    1001 | 1 ton anvil    |       9.99 | 1 ton anvil, black, complete with handy hook and carrying case |\n| ANV03   |    1001 | 2 ton anvil    |      14.99 | 2 ton anvil, black, complete with handy hook and carrying case |\n| DTNTR   |    1003 | Detonator      |      13.00 | Detonator (plunger powered), fuses not included                |\n| FB      |    1003 | Bird seed      |      10.00 | Large bag (suitable for road runners)                          |\n| FC      |    1003 | Carrots        |       2.50 | Carrots (rabbit hunting season only)                           |\n| FU1     |    1002 | Fuses          |       3.42 | 1 dozen, extra long                                            |\n| JP1000  |    1005 | JetPack 1000   |      35.00 | JetPack 1000, intended for single use                          |\n| JP2000  |    1005 | JetPack 2000   |      55.00 | JetPack 2000, multi-use                                        |\n| OL1     |    1002 | Oil can        |       8.99 | Oil can, red                                                   |\n| SAFE    |    1003 | Safe           |      50.00 | Safe with combination lock                                     |\n| SLING   |    1003 | Sling          |       4.49 | Sling, one size fits all                                       |\n| TNT1    |    1003 | TNT (1 stick)  |       2.50 | TNT, red, single stick                                         |\n| TNT2    |    1003 | TNT (5 sticks) |      10.00 | TNT, red, pack of 10 sticks                                    |\n+---------+---------+----------------+------------+----------------------------------------------------------------+\n14 rows in set (0.00 sec)  -SELECT vend_id FROM products;  +---------+\n| vend_id |\n+---------+\n|    1001 |\n|    1001 |\n|    1001 |\n|    1002 |\n|    1002 |\n|    1003 |\n|    1003 |\n|    1003 |\n|    1003 |\n|    1003 |\n|    1003 |\n|    1003 |\n|    1005 |\n|    1005 |\n+---------+\n14 rows in set (0.00 sec)  SELECT DISTINCT vend_id FROM products;  +---------+\n| vend_id |\n+---------+\n|    1001 |\n|    1002 |\n|    1003 |\n|    1005 |\n+---------+\n4 rows in set (0.00 sec)",
            "title": "Retreiving data"
        },
        {
            "location": "/sorting-retreived-data/",
            "text": "Sorting retreived data",
            "title": "Sorting retreived data"
        },
        {
            "location": "/sorting-retreived-data/#sorting-retreived-data",
            "text": "",
            "title": "Sorting retreived data"
        },
        {
            "location": "/filtering-data/",
            "text": "Filtering data\n\n\nSELECT prod_name\nFROM products\nLIMIT 5;\n\n\n\n\n+--------------+\n| prod_name    |\n+--------------+\n| .5 ton anvil |\n| 1 ton anvil  |\n| 2 ton anvil  |\n| Detonator    |\n| Bird seed    |\n+--------------+\n5 rows in set (0.00 sec)\n\n\n\n\nSELECT prod_name\nFROM products\nLIMIT 5, 5;\n\n\n\n\n+--------------+\n| prod_name    |\n+--------------+\n| Carrots      |\n| Fuses        |\n| JetPack 1000 |\n| JetPack 2000 |\n| Oil can      |\n+--------------+\n5 rows in set (0.00 sec)\n\n\n\n\nSELECT products.prod_name\nFROM products;\n\n\n\n\n+----------------+\n| prod_name      |\n+----------------+\n| .5 ton anvil   |\n| 1 ton anvil    |\n| 2 ton anvil    |\n| Detonator      |\n| Bird seed      |\n| Carrots        |\n| Fuses          |\n| JetPack 1000   |\n| JetPack 2000   |\n| Oil can        |\n| Safe           |\n| Sling          |\n| TNT (1 stick)  |\n| TNT (5 sticks) |\n+----------------+\n14 rows in set (0.00 sec)\n\n\n\n\nSELECT prod_name\nFROM products\nORDER BY prod_name;\n\n\n\n\n+----------------+\n| prod_name      |\n+----------------+\n| .5 ton anvil   |\n| 1 ton anvil    |\n| 2 ton anvil    |\n| Bird seed      |\n| Carrots        |\n| Detonator      |\n| Fuses          |\n| JetPack 1000   |\n| JetPack 2000   |\n| Oil can        |\n| Safe           |\n| Sling          |\n| TNT (1 stick)  |\n| TNT (5 sticks) |\n+----------------+\n14 rows in set (0.00 sec)\n\n\n\n\nSELECT prod_id, prod_price, prod_name\nFROM products\nORDER BY prod_price, prod_name;\n\n\n\n\n+---------+------------+----------------+\n| prod_id | prod_price | prod_name      |\n+---------+------------+----------------+\n| FC      |       2.50 | Carrots        |\n| TNT1    |       2.50 | TNT (1 stick)  |\n| FU1     |       3.42 | Fuses          |\n| SLING   |       4.49 | Sling          |\n| ANV01   |       5.99 | .5 ton anvil   |\n| OL1     |       8.99 | Oil can        |\n| ANV02   |       9.99 | 1 ton anvil    |\n| FB      |      10.00 | Bird seed      |\n| TNT2    |      10.00 | TNT (5 sticks) |\n| DTNTR   |      13.00 | Detonator      |\n| ANV03   |      14.99 | 2 ton anvil    |\n| JP1000  |      35.00 | JetPack 1000   |\n| SAFE    |      50.00 | Safe           |\n| JP2000  |      55.00 | JetPack 2000   |\n+---------+------------+----------------+\n14 rows in set (0.03 sec)\n\n\n\n\nSELECT prod_id, prod_price, prod_name\nFROM products\nORDER BY prod_price DESC;\n\n\n\n\n+---------+------------+----------------+\n| prod_id | prod_price | prod_name      |\n+---------+------------+----------------+\n| JP2000  |      55.00 | JetPack 2000   |\n| SAFE    |      50.00 | Safe           |\n| JP1000  |      35.00 | JetPack 1000   |\n| ANV03   |      14.99 | 2 ton anvil    |\n| DTNTR   |      13.00 | Detonator      |\n| TNT2    |      10.00 | TNT (5 sticks) |\n| FB      |      10.00 | Bird seed      |\n| ANV02   |       9.99 | 1 ton anvil    |\n| OL1     |       8.99 | Oil can        |\n| ANV01   |       5.99 | .5 ton anvil   |\n| SLING   |       4.49 | Sling          |\n| FU1     |       3.42 | Fuses          |\n| FC      |       2.50 | Carrots        |\n| TNT1    |       2.50 | TNT (1 stick)  |\n+---------+------------+----------------+\n14 rows in set (0.00 sec)\n\n\n\n\nSELECT prod_id, prod_price, prod_name\nFROM products\nORDER BY prod_price DESC, prod_name;\n\n\n\n\n+---------+------------+----------------+\n| prod_id | prod_price | prod_name      |\n+---------+------------+----------------+\n| JP2000  |      55.00 | JetPack 2000   |\n| SAFE    |      50.00 | Safe           |\n| JP1000  |      35.00 | JetPack 1000   |\n| ANV03   |      14.99 | 2 ton anvil    |\n| DTNTR   |      13.00 | Detonator      |\n| FB      |      10.00 | Bird seed      |\n| TNT2    |      10.00 | TNT (5 sticks) |\n| ANV02   |       9.99 | 1 ton anvil    |\n| OL1     |       8.99 | Oil can        |\n| ANV01   |       5.99 | .5 ton anvil   |\n| SLING   |       4.49 | Sling          |\n| FU1     |       3.42 | Fuses          |\n| FC      |       2.50 | Carrots        |\n| TNT1    |       2.50 | TNT (1 stick)  |\n+---------+------------+----------------+\n14 rows in set (0.00 sec)\n\n\n\n\nSELECT prod_price\nFROM products\nORDER BY prod_price DESC LIMIT 1;\n\n\n\n\n+------------+\n| prod_price |\n+------------+\n|      55.00 |\n+------------+\n1 row in set (0.00 sec)\n\n\n\n\nSELECT prod_name, prod_price\nFROM products\nWHERE prod_price = 2.50;\n\n\n\n\n+---------------+------------+\n| prod_name     | prod_price |\n+---------------+------------+\n| Carrots       |       2.50 |\n| TNT (1 stick) |       2.50 |\n+---------------+------------+\n2 rows in set (0.00 sec)\n\n\n\n\nSELECT prod_name, prod_price\nFROM products\nWHERE prod_name = 'fuses';\n\n\n\n\n+-----------+------------+\n| prod_name | prod_price |\n+-----------+------------+\n| Fuses     |       3.42 |\n+-----------+------------+\n1 row in set (0.00 sec)\n\n\n\n\nSELECT prod_name, prod_price\nFROM products\nWHERE prod_price <= 10;\n\n\n\n\n+----------------+------------+\n| prod_name      | prod_price |\n+----------------+------------+\n| .5 ton anvil   |       5.99 |\n| 1 ton anvil    |       9.99 |\n| Bird seed      |      10.00 |\n| Carrots        |       2.50 |\n| Fuses          |       3.42 |\n| Oil can        |       8.99 |\n| Sling          |       4.49 |\n| TNT (1 stick)  |       2.50 |\n| TNT (5 sticks) |      10.00 |\n+----------------+------------+\n9 rows in set (0.00 sec)\n\n\n\n\nSELECT vend_id, prod_name\nFROM products\nWHERE vend_id <> 1003;\n\n\n\n\n+---------+--------------+\n| vend_id | prod_name    |\n+---------+--------------+\n|    1001 | .5 ton anvil |\n|    1001 | 1 ton anvil  |\n|    1001 | 2 ton anvil  |\n|    1002 | Fuses        |\n|    1005 | JetPack 1000 |\n|    1005 | JetPack 2000 |\n|    1002 | Oil can      |\n+---------+--------------+\n7 rows in set (0.00 sec)\n\n\n\n\nSELECT vend_id, prod_name\nFROM products\nWHERE vend_id != 1003;\n\n\n\n\n+---------+--------------+\n| vend_id | prod_name    |\n+---------+--------------+\n|    1001 | .5 ton anvil |\n|    1001 | 1 ton anvil  |\n|    1001 | 2 ton anvil  |\n|    1002 | Fuses        |\n|    1005 | JetPack 1000 |\n|    1005 | JetPack 2000 |\n|    1002 | Oil can      |\n+---------+--------------+\n7 rows in set (0.00 sec)\n\n\n\n\nSELECT prod_name, prod_price\nFROM products\nWHERE prod_price BETWEEN 5 and 10;\n\n\n\n\n+----------------+------------+\n| prod_name      | prod_price |\n+----------------+------------+\n| .5 ton anvil   |       5.99 |\n| 1 ton anvil    |       9.99 |\n| Bird seed      |      10.00 |\n| Oil can        |       8.99 |\n| TNT (5 sticks) |      10.00 |\n+----------------+------------+\n5 rows in set (0.00 sec)\n\n\n\n\nSELECT prod_name\nFROM products\nWHERE prod_price IS NULL;\n\n\n\n\nEmpty set (0.00 sec)\n\n\n\n\nSELECT cust_id\nFROM customers\nWHERE cust_email IS NULL;\n\n\n\n\n+---------+\n| cust_id |\n+---------+\n|   10002 |\n|   10005 |\n+---------+\n2 rows in set (0.00 sec)",
            "title": "Filtering data"
        },
        {
            "location": "/filtering-data/#filtering-data",
            "text": "SELECT prod_name\nFROM products\nLIMIT 5;  +--------------+\n| prod_name    |\n+--------------+\n| .5 ton anvil |\n| 1 ton anvil  |\n| 2 ton anvil  |\n| Detonator    |\n| Bird seed    |\n+--------------+\n5 rows in set (0.00 sec)  SELECT prod_name\nFROM products\nLIMIT 5, 5;  +--------------+\n| prod_name    |\n+--------------+\n| Carrots      |\n| Fuses        |\n| JetPack 1000 |\n| JetPack 2000 |\n| Oil can      |\n+--------------+\n5 rows in set (0.00 sec)  SELECT products.prod_name\nFROM products;  +----------------+\n| prod_name      |\n+----------------+\n| .5 ton anvil   |\n| 1 ton anvil    |\n| 2 ton anvil    |\n| Detonator      |\n| Bird seed      |\n| Carrots        |\n| Fuses          |\n| JetPack 1000   |\n| JetPack 2000   |\n| Oil can        |\n| Safe           |\n| Sling          |\n| TNT (1 stick)  |\n| TNT (5 sticks) |\n+----------------+\n14 rows in set (0.00 sec)  SELECT prod_name\nFROM products\nORDER BY prod_name;  +----------------+\n| prod_name      |\n+----------------+\n| .5 ton anvil   |\n| 1 ton anvil    |\n| 2 ton anvil    |\n| Bird seed      |\n| Carrots        |\n| Detonator      |\n| Fuses          |\n| JetPack 1000   |\n| JetPack 2000   |\n| Oil can        |\n| Safe           |\n| Sling          |\n| TNT (1 stick)  |\n| TNT (5 sticks) |\n+----------------+\n14 rows in set (0.00 sec)  SELECT prod_id, prod_price, prod_name\nFROM products\nORDER BY prod_price, prod_name;  +---------+------------+----------------+\n| prod_id | prod_price | prod_name      |\n+---------+------------+----------------+\n| FC      |       2.50 | Carrots        |\n| TNT1    |       2.50 | TNT (1 stick)  |\n| FU1     |       3.42 | Fuses          |\n| SLING   |       4.49 | Sling          |\n| ANV01   |       5.99 | .5 ton anvil   |\n| OL1     |       8.99 | Oil can        |\n| ANV02   |       9.99 | 1 ton anvil    |\n| FB      |      10.00 | Bird seed      |\n| TNT2    |      10.00 | TNT (5 sticks) |\n| DTNTR   |      13.00 | Detonator      |\n| ANV03   |      14.99 | 2 ton anvil    |\n| JP1000  |      35.00 | JetPack 1000   |\n| SAFE    |      50.00 | Safe           |\n| JP2000  |      55.00 | JetPack 2000   |\n+---------+------------+----------------+\n14 rows in set (0.03 sec)  SELECT prod_id, prod_price, prod_name\nFROM products\nORDER BY prod_price DESC;  +---------+------------+----------------+\n| prod_id | prod_price | prod_name      |\n+---------+------------+----------------+\n| JP2000  |      55.00 | JetPack 2000   |\n| SAFE    |      50.00 | Safe           |\n| JP1000  |      35.00 | JetPack 1000   |\n| ANV03   |      14.99 | 2 ton anvil    |\n| DTNTR   |      13.00 | Detonator      |\n| TNT2    |      10.00 | TNT (5 sticks) |\n| FB      |      10.00 | Bird seed      |\n| ANV02   |       9.99 | 1 ton anvil    |\n| OL1     |       8.99 | Oil can        |\n| ANV01   |       5.99 | .5 ton anvil   |\n| SLING   |       4.49 | Sling          |\n| FU1     |       3.42 | Fuses          |\n| FC      |       2.50 | Carrots        |\n| TNT1    |       2.50 | TNT (1 stick)  |\n+---------+------------+----------------+\n14 rows in set (0.00 sec)  SELECT prod_id, prod_price, prod_name\nFROM products\nORDER BY prod_price DESC, prod_name;  +---------+------------+----------------+\n| prod_id | prod_price | prod_name      |\n+---------+------------+----------------+\n| JP2000  |      55.00 | JetPack 2000   |\n| SAFE    |      50.00 | Safe           |\n| JP1000  |      35.00 | JetPack 1000   |\n| ANV03   |      14.99 | 2 ton anvil    |\n| DTNTR   |      13.00 | Detonator      |\n| FB      |      10.00 | Bird seed      |\n| TNT2    |      10.00 | TNT (5 sticks) |\n| ANV02   |       9.99 | 1 ton anvil    |\n| OL1     |       8.99 | Oil can        |\n| ANV01   |       5.99 | .5 ton anvil   |\n| SLING   |       4.49 | Sling          |\n| FU1     |       3.42 | Fuses          |\n| FC      |       2.50 | Carrots        |\n| TNT1    |       2.50 | TNT (1 stick)  |\n+---------+------------+----------------+\n14 rows in set (0.00 sec)  SELECT prod_price\nFROM products\nORDER BY prod_price DESC LIMIT 1;  +------------+\n| prod_price |\n+------------+\n|      55.00 |\n+------------+\n1 row in set (0.00 sec)  SELECT prod_name, prod_price\nFROM products\nWHERE prod_price = 2.50;  +---------------+------------+\n| prod_name     | prod_price |\n+---------------+------------+\n| Carrots       |       2.50 |\n| TNT (1 stick) |       2.50 |\n+---------------+------------+\n2 rows in set (0.00 sec)  SELECT prod_name, prod_price\nFROM products\nWHERE prod_name = 'fuses';  +-----------+------------+\n| prod_name | prod_price |\n+-----------+------------+\n| Fuses     |       3.42 |\n+-----------+------------+\n1 row in set (0.00 sec)  SELECT prod_name, prod_price\nFROM products\nWHERE prod_price <= 10;  +----------------+------------+\n| prod_name      | prod_price |\n+----------------+------------+\n| .5 ton anvil   |       5.99 |\n| 1 ton anvil    |       9.99 |\n| Bird seed      |      10.00 |\n| Carrots        |       2.50 |\n| Fuses          |       3.42 |\n| Oil can        |       8.99 |\n| Sling          |       4.49 |\n| TNT (1 stick)  |       2.50 |\n| TNT (5 sticks) |      10.00 |\n+----------------+------------+\n9 rows in set (0.00 sec)  SELECT vend_id, prod_name\nFROM products\nWHERE vend_id <> 1003;  +---------+--------------+\n| vend_id | prod_name    |\n+---------+--------------+\n|    1001 | .5 ton anvil |\n|    1001 | 1 ton anvil  |\n|    1001 | 2 ton anvil  |\n|    1002 | Fuses        |\n|    1005 | JetPack 1000 |\n|    1005 | JetPack 2000 |\n|    1002 | Oil can      |\n+---------+--------------+\n7 rows in set (0.00 sec)  SELECT vend_id, prod_name\nFROM products\nWHERE vend_id != 1003;  +---------+--------------+\n| vend_id | prod_name    |\n+---------+--------------+\n|    1001 | .5 ton anvil |\n|    1001 | 1 ton anvil  |\n|    1001 | 2 ton anvil  |\n|    1002 | Fuses        |\n|    1005 | JetPack 1000 |\n|    1005 | JetPack 2000 |\n|    1002 | Oil can      |\n+---------+--------------+\n7 rows in set (0.00 sec)  SELECT prod_name, prod_price\nFROM products\nWHERE prod_price BETWEEN 5 and 10;  +----------------+------------+\n| prod_name      | prod_price |\n+----------------+------------+\n| .5 ton anvil   |       5.99 |\n| 1 ton anvil    |       9.99 |\n| Bird seed      |      10.00 |\n| Oil can        |       8.99 |\n| TNT (5 sticks) |      10.00 |\n+----------------+------------+\n5 rows in set (0.00 sec)  SELECT prod_name\nFROM products\nWHERE prod_price IS NULL;  Empty set (0.00 sec)  SELECT cust_id\nFROM customers\nWHERE cust_email IS NULL;  +---------+\n| cust_id |\n+---------+\n|   10002 |\n|   10005 |\n+---------+\n2 rows in set (0.00 sec)",
            "title": "Filtering data"
        },
        {
            "location": "/searching-using-regular-expressions/",
            "text": "Searching using regular expressions\n\n\n\n\nAttention\n\n\nThis chapter is not been seen in class.",
            "title": "Searching using Regular Expressions"
        },
        {
            "location": "/searching-using-regular-expressions/#searching-using-regular-expressions",
            "text": "Attention  This chapter is not been seen in class.",
            "title": "Searching using regular expressions"
        },
        {
            "location": "/calculated-fields/",
            "text": "Calculated fields\n\n\nConcatinating fields\n\n\nSELECT Concat(vend_name, ' (', vend_country, ')')\nFROM vendors\nORDER BY vend_name;\n\n\n\n\n+--------------------------------------------+\n| Concat(vend_name, ' (', vend_country, ')') |\n+--------------------------------------------+\n| ACME (USA)                                 |\n| Anvils R Us (USA)                          |\n| Furball Inc. (USA)                         |\n| Jet Set (England)                          |\n| Jouets Et Ours (France)                    |\n| LT Supplies (USA)                          |\n+--------------------------------------------+\n\n\n\n\nAliases\n\n\nSELECT Concat(RTrim(vend_name), ' (', RTrim(vend_country), ')') AS vend_title\nFROM vendors\nORDER BY vend_name;\n\n\n\n\n+-------------------------+\n| vend_title              |\n+-------------------------+\n| ACME (USA)              |\n| Anvils R Us (USA)       |\n| Furball Inc. (USA)      |\n| Jet Set (England)       |\n| Jouets Et Ours (France) |\n| LT Supplies (USA)       |\n+-------------------------+\n\n\n\n\nMathematical calculations\n\n\nSELECT prod_id, quantity, item_price\nFROM orderitems\nWHERE order_num = 20005;\n\n\n\n\n+---------+----------+------------+\n| prod_id | quantity | item_price |\n+---------+----------+------------+\n| ANV01   |       10 |       5.99 |\n| ANV02   |        3 |       9.99 |\n| TNT2    |        5 |      10.00 |\n| FB      |        1 |      10.00 |\n+---------+----------+------------+\n\n\n\n\nSELECT  prod_id,\n        quantity,\n        item_price,\n        quantity * item_price AS expanded_price\nFROM orderitems\nWHERE order_num = 20005;\n\n\n\n\n+---------+----------+------------+----------------+\n| prod_id | quantity | item_price | expanded_price |\n+---------+----------+------------+----------------+\n| ANV01   |       10 |       5.99 |          59.90 |\n| ANV02   |        3 |       9.99 |          29.97 |\n| TNT2    |        5 |      10.00 |          50.00 |\n| FB      |        1 |      10.00 |          10.00 |\n+---------+----------+------------+----------------+\n\n\n\n\n\n\n\n\n\n\nOperator\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n+\n\n\nAddition\n\n\n\n\n\n\n-\n\n\nSubtraction\n\n\n\n\n\n\n*\n\n\nMultiplication\n\n\n\n\n\n\n/\n\n\nDivision",
            "title": "Calculated fields"
        },
        {
            "location": "/calculated-fields/#calculated-fields",
            "text": "",
            "title": "Calculated fields"
        },
        {
            "location": "/calculated-fields/#concatinating-fields",
            "text": "SELECT Concat(vend_name, ' (', vend_country, ')')\nFROM vendors\nORDER BY vend_name;  +--------------------------------------------+\n| Concat(vend_name, ' (', vend_country, ')') |\n+--------------------------------------------+\n| ACME (USA)                                 |\n| Anvils R Us (USA)                          |\n| Furball Inc. (USA)                         |\n| Jet Set (England)                          |\n| Jouets Et Ours (France)                    |\n| LT Supplies (USA)                          |\n+--------------------------------------------+",
            "title": "Concatinating fields"
        },
        {
            "location": "/calculated-fields/#aliases",
            "text": "SELECT Concat(RTrim(vend_name), ' (', RTrim(vend_country), ')') AS vend_title\nFROM vendors\nORDER BY vend_name;  +-------------------------+\n| vend_title              |\n+-------------------------+\n| ACME (USA)              |\n| Anvils R Us (USA)       |\n| Furball Inc. (USA)      |\n| Jet Set (England)       |\n| Jouets Et Ours (France) |\n| LT Supplies (USA)       |\n+-------------------------+",
            "title": "Aliases"
        },
        {
            "location": "/calculated-fields/#mathematical-calculations",
            "text": "SELECT prod_id, quantity, item_price\nFROM orderitems\nWHERE order_num = 20005;  +---------+----------+------------+\n| prod_id | quantity | item_price |\n+---------+----------+------------+\n| ANV01   |       10 |       5.99 |\n| ANV02   |        3 |       9.99 |\n| TNT2    |        5 |      10.00 |\n| FB      |        1 |      10.00 |\n+---------+----------+------------+  SELECT  prod_id,\n        quantity,\n        item_price,\n        quantity * item_price AS expanded_price\nFROM orderitems\nWHERE order_num = 20005;  +---------+----------+------------+----------------+\n| prod_id | quantity | item_price | expanded_price |\n+---------+----------+------------+----------------+\n| ANV01   |       10 |       5.99 |          59.90 |\n| ANV02   |        3 |       9.99 |          29.97 |\n| TNT2    |        5 |      10.00 |          50.00 |\n| FB      |        1 |      10.00 |          10.00 |\n+---------+----------+------------+----------------+     Operator  Description      +  Addition    -  Subtraction    *  Multiplication    /  Division",
            "title": "Mathematical calculations"
        },
        {
            "location": "/data-manipulation/",
            "text": "Data manipulation\n\n\nText manipulation functions\n\n\nSELECT vend_name, UPPER(vend_name) AS vend_name_upcase\nFROM vendors\nORDER BY vend_name;\n\n\n\n\n+----------------+------------------+\n| vend_name      | vend_name_upcase |\n+----------------+------------------+\n| ACME           | ACME             |\n| Anvils R Us    | ANVILS R US      |\n| Furball Inc.   | FURBALL INC.     |\n| Jet Set        | JET SET          |\n| Jouets Et Ours | JOUETS ET OURS   |\n| LT Supplies    | LT SUPPLIES      |\n+----------------+------------------+\n\n\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nLeft()\n\n\nReturns characters from left of string\n\n\n\n\n\n\nLenght()\n\n\nReturns the lenght of a string\n\n\n\n\n\n\nLocate()\n\n\nFinds a substring within a string\n\n\n\n\n\n\nLower()\n\n\nConverts string to lowercase\n\n\n\n\n\n\nLTrim()\n\n\nTrims white space from left of string\n\n\n\n\n\n\nRight()\n\n\nReturns chraracters from right of string\n\n\n\n\n\n\nRTrim()\n\n\nTrims white space from right of string\n\n\n\n\n\n\nSoundex()\n\n\nReturns a string's SOUNDEX value\n\n\n\n\n\n\nSubString()\n\n\nReturns characters from within a string\n\n\n\n\n\n\nUpper\n\n\nConverts string to uppercase\n\n\n\n\n\n\n\n\nDate and time manipulation functions\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAddDate()\n\n\nAdd to a date (days, weeks, and so on)\n\n\n\n\n\n\nAddTime()\n\n\nAdd to a time (hours, minutes, and so on)\n\n\n\n\n\n\nCurDate()\n\n\nReturns the current date\n\n\n\n\n\n\nCurTime()\n\n\nReturns the current time\n\n\n\n\n\n\nDate()\n\n\nReturns the date portion of a date time\n\n\n\n\n\n\nDateDiff()\n\n\nCalculates the difference between two dates\n\n\n\n\n\n\nDate_Add()\n\n\nHighly flexible date arithmetic function\n\n\n\n\n\n\nDate_Format()\n\n\nReturns a formatted date or time string\n\n\n\n\n\n\nDay()\n\n\nReturns the day portion of a date\n\n\n\n\n\n\nDayOfWeek()\n\n\nReturns the day of the week for a date\n\n\n\n\n\n\nHour()\n\n\nReturns the hour portion of a time\n\n\n\n\n\n\nMinute()\n\n\nReturns the minute portion of a time\n\n\n\n\n\n\nMonth()\n\n\nReturns the month portion of a date\n\n\n\n\n\n\nNow()\n\n\nReturns the current date and time\n\n\n\n\n\n\nSecond()\n\n\nReturns the second portion of a time\n\n\n\n\n\n\nTime()\n\n\nReturns the time portion of a date time\n\n\n\n\n\n\nYear()\n\n\nReturns the year portion\n\n\n\n\n\n\n\n\nSelect by date example\n\n\nSELECT cust_id, order_num\nFROM orders\nWHERE Date(order_date) = '2005-09-01';\n\n\n\n\n+---------+-----------+\n| cust_id | order_num |\n+---------+-----------+\n|   10001 |     20005 |\n+---------+-----------+\n1 row in set (0.01 sec)\n\n\n\n\nSelect between two dates example\n\n\nSELECT cust_id, order_num\nFROM orders\nWHERE Date(order_date) BETWEEN '2005-09-01' AND '2005-09-30';\n\n\n\n\n+---------+-----------+\n| cust_id | order_num |\n+---------+-----------+\n|   10001 |     20005 |\n|   10003 |     20006 |\n|   10004 |     20007 |\n+---------+-----------+\n3 rows in set (0.00 sec)\n\n\n\n\nAlternative, but better way to select for years or months.\n\n\nSELECT cust_id, order_num\nFROM orders\nWHERE Year(order_date) = 2005 AND Month(order_date) = 9;\n\n\n\n\n+---------+-----------+\n| cust_id | order_num |\n+---------+-----------+\n|   10001 |     20005 |\n|   10003 |     20006 |\n|   10004 |     20007 |\n+---------+-----------+\n\n\n\n\nNumeric manipulation functions\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAbs()\n\n\nReturns a nuber's absolute value\n\n\n\n\n\n\nCos()\n\n\nReturns the trigonometric cosine of a specified angle\n\n\n\n\n\n\nExp()\n\n\nReturns the exponential value of a specific number\n\n\n\n\n\n\nMod()\n\n\nReturns the remainder of a division operation\n\n\n\n\n\n\nPi()\n\n\nReturns the value of pi\n\n\n\n\n\n\nRand()\n\n\nReturns a random number\n\n\n\n\n\n\nSin()\n\n\nRetunrs the trigonometric sine of a specified angle\n\n\n\n\n\n\nSqrt()\n\n\nReturns the square root of a specied number\n\n\n\n\n\n\nTan()\n\n\nReturns the trigonometric tangent of a specified angle",
            "title": "Data manipulation"
        },
        {
            "location": "/data-manipulation/#data-manipulation",
            "text": "",
            "title": "Data manipulation"
        },
        {
            "location": "/data-manipulation/#text-manipulation-functions",
            "text": "SELECT vend_name, UPPER(vend_name) AS vend_name_upcase\nFROM vendors\nORDER BY vend_name;  +----------------+------------------+\n| vend_name      | vend_name_upcase |\n+----------------+------------------+\n| ACME           | ACME             |\n| Anvils R Us    | ANVILS R US      |\n| Furball Inc.   | FURBALL INC.     |\n| Jet Set        | JET SET          |\n| Jouets Et Ours | JOUETS ET OURS   |\n| LT Supplies    | LT SUPPLIES      |\n+----------------+------------------+     Function  Description      Left()  Returns characters from left of string    Lenght()  Returns the lenght of a string    Locate()  Finds a substring within a string    Lower()  Converts string to lowercase    LTrim()  Trims white space from left of string    Right()  Returns chraracters from right of string    RTrim()  Trims white space from right of string    Soundex()  Returns a string's SOUNDEX value    SubString()  Returns characters from within a string    Upper  Converts string to uppercase",
            "title": "Text manipulation functions"
        },
        {
            "location": "/data-manipulation/#date-and-time-manipulation-functions",
            "text": "Function  Description      AddDate()  Add to a date (days, weeks, and so on)    AddTime()  Add to a time (hours, minutes, and so on)    CurDate()  Returns the current date    CurTime()  Returns the current time    Date()  Returns the date portion of a date time    DateDiff()  Calculates the difference between two dates    Date_Add()  Highly flexible date arithmetic function    Date_Format()  Returns a formatted date or time string    Day()  Returns the day portion of a date    DayOfWeek()  Returns the day of the week for a date    Hour()  Returns the hour portion of a time    Minute()  Returns the minute portion of a time    Month()  Returns the month portion of a date    Now()  Returns the current date and time    Second()  Returns the second portion of a time    Time()  Returns the time portion of a date time    Year()  Returns the year portion",
            "title": "Date and time manipulation functions"
        },
        {
            "location": "/data-manipulation/#select-by-date-example",
            "text": "SELECT cust_id, order_num\nFROM orders\nWHERE Date(order_date) = '2005-09-01';  +---------+-----------+\n| cust_id | order_num |\n+---------+-----------+\n|   10001 |     20005 |\n+---------+-----------+\n1 row in set (0.01 sec)",
            "title": "Select by date example"
        },
        {
            "location": "/data-manipulation/#select-between-two-dates-example",
            "text": "SELECT cust_id, order_num\nFROM orders\nWHERE Date(order_date) BETWEEN '2005-09-01' AND '2005-09-30';  +---------+-----------+\n| cust_id | order_num |\n+---------+-----------+\n|   10001 |     20005 |\n|   10003 |     20006 |\n|   10004 |     20007 |\n+---------+-----------+\n3 rows in set (0.00 sec)  Alternative, but better way to select for years or months.  SELECT cust_id, order_num\nFROM orders\nWHERE Year(order_date) = 2005 AND Month(order_date) = 9;  +---------+-----------+\n| cust_id | order_num |\n+---------+-----------+\n|   10001 |     20005 |\n|   10003 |     20006 |\n|   10004 |     20007 |\n+---------+-----------+",
            "title": "Select between two dates example"
        },
        {
            "location": "/data-manipulation/#numeric-manipulation-functions",
            "text": "Function  Description      Abs()  Returns a nuber's absolute value    Cos()  Returns the trigonometric cosine of a specified angle    Exp()  Returns the exponential value of a specific number    Mod()  Returns the remainder of a division operation    Pi()  Returns the value of pi    Rand()  Returns a random number    Sin()  Retunrs the trigonometric sine of a specified angle    Sqrt()  Returns the square root of a specied number    Tan()  Returns the trigonometric tangent of a specified angle",
            "title": "Numeric manipulation functions"
        },
        {
            "location": "/summarizing-data/",
            "text": "Summarizing data\n\n\nUsing aggregate functions\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAVG()\n\n\nReturns a column's average value\n\n\n\n\n\n\nCOUNT()\n\n\nReturns the number of rows in a column\n\n\n\n\n\n\nMAX()\n\n\nReturns a column's highest value\n\n\n\n\n\n\nMIN()\n\n\nReturns a column's lowest value\n\n\n\n\n\n\nSUM()\n\n\nReturns the sum of a column's value\n\n\n\n\n\n\n\n\nThe AVG() function\n\n\nSELECT AVG(prod_price) AS avg_price\nFROM products;\n\n\n\n\n+-----------+\n| avg_price |\n+-----------+\n| 16.133571 |\n+-----------+\n\n\n\n\nSELECT AVG(prod_price) AS avg_price\nFROM products\nWHERE vend_id = 1003;\n\n\n\n\n+-----------+\n| avg_price |\n+-----------+\n| 13.212857 |\n+-----------+\n\n\n\n\nThe COUNT() function\n\n\nSELECT COUNT(*) AS num_cust\nFROM customers;\n\n\n\n\n+----------+\n| num_cust |\n+----------+\n|        5 |\n+----------+\n\n\n\n\nSELECT COUNT(cust_email) AS num_cust\nFROM customers;\n\n\n\n\n+----------+\n| num_cust |\n+----------+\n|        3 |\n+----------+\n\n\n\n\nThe MAX() function\n\n\nSELECT MAX(prod_price) AS max_price\nFROM products;\n\n\n\n\n+-----------+\n| max_price |\n+-----------+\n|     55.00 |\n+-----------+\n\n\n\n\nThe MIN() function\n\n\nSELECT MIN(prod_price) AS min_price\nFROM products;\n\n\n\n\n+-----------+\n| min_price |\n+-----------+\n|      2.50 |\n+-----------+\n\n\n\n\nThe SUM() function\n\n\nSELECT SUM(quantity) AS items_ordered\nFROM orderitems\nWHERE order_num = 20005;\n\n\n\n\n+---------------+\n| items_ordered |\n+---------------+\n|            19 |\n+---------------+\n\n\n\n\nSELECT SUM(item_price * quantity) AS total_price\nFROM orderitems\nWHERE order_num = 20005;\n\n\n\n\n+-------------+\n| total_price |\n+-------------+\n|      149.87 |\n+-------------+\n\n\n\n\nAggregates on distinct values\n\n\nSELECT AVG(DISTINCT prod_price) AS avg_price\nFROM products\nWHERE vend_id = 1003;\n\n\n\n\n+-----------+\n| avg_price |\n+-----------+\n| 15.998000 |\n+-----------+\n\n\n\n\nCombining aggregate functions\n\n\nSELECT COUNT(*) AS num_items,\n    MIN(prod_price) AS price_min,\n    MAX(prod_price) AS price_max,\n    AVG(prod_price) AS price_avg\nFROM products;\n\n\n\n\n+-----------+-----------+-----------+-----------+\n| num_items | price_min | price_max | price_avg |\n+-----------+-----------+-----------+-----------+\n|        14 |      2.50 |     55.00 | 16.133571 |\n+-----------+-----------+-----------+-----------+",
            "title": "Summarizing data"
        },
        {
            "location": "/summarizing-data/#summarizing-data",
            "text": "",
            "title": "Summarizing data"
        },
        {
            "location": "/summarizing-data/#using-aggregate-functions",
            "text": "Function  Description      AVG()  Returns a column's average value    COUNT()  Returns the number of rows in a column    MAX()  Returns a column's highest value    MIN()  Returns a column's lowest value    SUM()  Returns the sum of a column's value",
            "title": "Using aggregate functions"
        },
        {
            "location": "/summarizing-data/#the-avg-function",
            "text": "SELECT AVG(prod_price) AS avg_price\nFROM products;  +-----------+\n| avg_price |\n+-----------+\n| 16.133571 |\n+-----------+  SELECT AVG(prod_price) AS avg_price\nFROM products\nWHERE vend_id = 1003;  +-----------+\n| avg_price |\n+-----------+\n| 13.212857 |\n+-----------+",
            "title": "The AVG() function"
        },
        {
            "location": "/summarizing-data/#the-count-function",
            "text": "SELECT COUNT(*) AS num_cust\nFROM customers;  +----------+\n| num_cust |\n+----------+\n|        5 |\n+----------+  SELECT COUNT(cust_email) AS num_cust\nFROM customers;  +----------+\n| num_cust |\n+----------+\n|        3 |\n+----------+",
            "title": "The COUNT() function"
        },
        {
            "location": "/summarizing-data/#the-max-function",
            "text": "SELECT MAX(prod_price) AS max_price\nFROM products;  +-----------+\n| max_price |\n+-----------+\n|     55.00 |\n+-----------+",
            "title": "The MAX() function"
        },
        {
            "location": "/summarizing-data/#the-min-function",
            "text": "SELECT MIN(prod_price) AS min_price\nFROM products;  +-----------+\n| min_price |\n+-----------+\n|      2.50 |\n+-----------+",
            "title": "The MIN() function"
        },
        {
            "location": "/summarizing-data/#the-sum-function",
            "text": "SELECT SUM(quantity) AS items_ordered\nFROM orderitems\nWHERE order_num = 20005;  +---------------+\n| items_ordered |\n+---------------+\n|            19 |\n+---------------+  SELECT SUM(item_price * quantity) AS total_price\nFROM orderitems\nWHERE order_num = 20005;  +-------------+\n| total_price |\n+-------------+\n|      149.87 |\n+-------------+",
            "title": "The SUM() function"
        },
        {
            "location": "/summarizing-data/#aggregates-on-distinct-values",
            "text": "SELECT AVG(DISTINCT prod_price) AS avg_price\nFROM products\nWHERE vend_id = 1003;  +-----------+\n| avg_price |\n+-----------+\n| 15.998000 |\n+-----------+",
            "title": "Aggregates on distinct values"
        },
        {
            "location": "/summarizing-data/#combining-aggregate-functions",
            "text": "SELECT COUNT(*) AS num_items,\n    MIN(prod_price) AS price_min,\n    MAX(prod_price) AS price_max,\n    AVG(prod_price) AS price_avg\nFROM products;  +-----------+-----------+-----------+-----------+\n| num_items | price_min | price_max | price_avg |\n+-----------+-----------+-----------+-----------+\n|        14 |      2.50 |     55.00 | 16.133571 |\n+-----------+-----------+-----------+-----------+",
            "title": "Combining aggregate functions"
        },
        {
            "location": "/grouping-data/",
            "text": "Grouping data\n\n\nCreating groups\n\n\nSELECT vend_id, COUNT(*) AS num_prods\nFROM products\nGROUP BY vend_id;\n\n\n\n\n+---------+-----------+\n| vend_id | num_prods |\n+---------+-----------+\n|    1001 |         3 |\n|    1002 |         2 |\n|    1003 |         7 |\n|    1005 |         2 |\n+---------+-----------+\n\n\n\n\nFiltering groups\n\n\nSELECT cust_id, COUNT(*) AS orders\nFROM orders\nGROUP BY cust_id\nHAVING COUNT(*) >= 2;\n\n\n\n\n+---------+--------+\n| cust_id | orders |\n+---------+--------+\n|   10001 |      2 |\n+---------+--------+\n\n\n\n\nSELECT vend_id, COUNT(*) AS num_prods\nFROM products\nWHERE prod_price >= 10\nGROUP BY vend_id\nHAVING COUNT(*) >= 2;\n\n\n\n\n+---------+-----------+\n| vend_id | num_prods |\n+---------+-----------+\n|    1003 |         4 |\n|    1005 |         2 |\n+---------+-----------+",
            "title": "Grouping data"
        },
        {
            "location": "/grouping-data/#grouping-data",
            "text": "",
            "title": "Grouping data"
        },
        {
            "location": "/grouping-data/#creating-groups",
            "text": "SELECT vend_id, COUNT(*) AS num_prods\nFROM products\nGROUP BY vend_id;  +---------+-----------+\n| vend_id | num_prods |\n+---------+-----------+\n|    1001 |         3 |\n|    1002 |         2 |\n|    1003 |         7 |\n|    1005 |         2 |\n+---------+-----------+",
            "title": "Creating groups"
        },
        {
            "location": "/grouping-data/#filtering-groups",
            "text": "SELECT cust_id, COUNT(*) AS orders\nFROM orders\nGROUP BY cust_id\nHAVING COUNT(*) >= 2;  +---------+--------+\n| cust_id | orders |\n+---------+--------+\n|   10001 |      2 |\n+---------+--------+  SELECT vend_id, COUNT(*) AS num_prods\nFROM products\nWHERE prod_price >= 10\nGROUP BY vend_id\nHAVING COUNT(*) >= 2;  +---------+-----------+\n| vend_id | num_prods |\n+---------+-----------+\n|    1003 |         4 |\n|    1005 |         2 |\n+---------+-----------+",
            "title": "Filtering groups"
        },
        {
            "location": "/subqueries/",
            "text": "Subqueries",
            "title": "Working with subqueries"
        },
        {
            "location": "/subqueries/#subqueries",
            "text": "",
            "title": "Subqueries"
        },
        {
            "location": "/joins/",
            "text": "Joins",
            "title": "Joining tables"
        },
        {
            "location": "/joins/#joins",
            "text": "",
            "title": "Joins"
        },
        {
            "location": "/combining-queries/",
            "text": "Combining queries\n\n\nSELECT\n(SELECT count(\n) as aantalusers FROM users),\n(SELECT count(\n) as aantalgames FROM games),\n(SELECT count(*) as aantalreviews FROM reviews);\n\n\n+-------------+------------+---------------+\n| aantalusers |aantalgames | aantalreviews |\n+-------------+------------+---------------+\n| 75          |       100  |      534      |\n+-------------+------------+---------------+",
            "title": "Combining queries"
        },
        {
            "location": "/combining-queries/#combining-queries",
            "text": "SELECT\n(SELECT count( ) as aantalusers FROM users),\n(SELECT count( ) as aantalgames FROM games),\n(SELECT count(*) as aantalreviews FROM reviews);  +-------------+------------+---------------+\n| aantalusers |aantalgames | aantalreviews |\n+-------------+------------+---------------+\n| 75          |       100  |      534      |\n+-------------+------------+---------------+",
            "title": "Combining queries"
        },
        {
            "location": "/full-text-searching/",
            "text": "Full-text Searching\n\n\n\n\ntest\n\n\nThis chapter is not been seen in class.",
            "title": "Full-text searching"
        },
        {
            "location": "/full-text-searching/#full-text-searching",
            "text": "test  This chapter is not been seen in class.",
            "title": "Full-text Searching"
        },
        {
            "location": "/inserting-data/",
            "text": "Inserting data",
            "title": "Inserting data"
        },
        {
            "location": "/inserting-data/#inserting-data",
            "text": "",
            "title": "Inserting data"
        },
        {
            "location": "/update-and-delete/",
            "text": "Updating and deleting data",
            "title": "Updating and deleting data"
        },
        {
            "location": "/update-and-delete/#updating-and-deleting-data",
            "text": "",
            "title": "Updating and deleting data"
        },
        {
            "location": "/creating-and-manipulating-tables/",
            "text": "Creating and manipulating tables",
            "title": "Creating and manipulating tables"
        },
        {
            "location": "/creating-and-manipulating-tables/#creating-and-manipulating-tables",
            "text": "",
            "title": "Creating and manipulating tables"
        },
        {
            "location": "/views/",
            "text": "Views\n\n\nA view is known as a \"virtual table\" where you can query data in.\nIt can be used to simplify difficult queries. This way you can reuse SQL statements.\nYou can also use this to add a bit of security to your queries (eg. Read only for a normal use)\n\n\nRules:\n\n\n\n\nName has to be unique\n\n\nYou need enough rights to add these\n\n\nYou can theoretically make an infinite amount of these\n\n\nViews can be nested\n\n\nViews should not be indexed, there are also no triggers allowed\n\n\n\n\nExample:\n\n\nCREATE VIEW productcustomers AS             -- Create a view called productcustomers\nSELECT cust_name, cust_contact, prod_id     -- These three lines will be executed when you use this view\nFROM customers, orders, orderitems\nWHERE customers.cust_id = orders.cust_id AND orderitems.order_num = orders.order_num;\n\nSELECT * FROM productcustomers;             -- This is how a view can be used",
            "title": "Using views"
        },
        {
            "location": "/views/#views",
            "text": "A view is known as a \"virtual table\" where you can query data in.\nIt can be used to simplify difficult queries. This way you can reuse SQL statements.\nYou can also use this to add a bit of security to your queries (eg. Read only for a normal use)",
            "title": "Views"
        },
        {
            "location": "/views/#rules",
            "text": "Name has to be unique  You need enough rights to add these  You can theoretically make an infinite amount of these  Views can be nested  Views should not be indexed, there are also no triggers allowed",
            "title": "Rules:"
        },
        {
            "location": "/views/#example",
            "text": "CREATE VIEW productcustomers AS             -- Create a view called productcustomers\nSELECT cust_name, cust_contact, prod_id     -- These three lines will be executed when you use this view\nFROM customers, orders, orderitems\nWHERE customers.cust_id = orders.cust_id AND orderitems.order_num = orders.order_num;\n\nSELECT * FROM productcustomers;             -- This is how a view can be used",
            "title": "Example:"
        },
        {
            "location": "/stored-procedures/",
            "text": "Stored procedures\n\n\n\n\nAttention\n\n\nThis chapter is not been seen in class.",
            "title": "Stored procedures"
        },
        {
            "location": "/stored-procedures/#stored-procedures",
            "text": "Attention  This chapter is not been seen in class.",
            "title": "Stored procedures"
        },
        {
            "location": "/cursors/",
            "text": "Cursors\n\n\n\n\nAttention\n\n\nThis chapter is not been seen in class.",
            "title": "Using cursors"
        },
        {
            "location": "/cursors/#cursors",
            "text": "Attention  This chapter is not been seen in class.",
            "title": "Cursors"
        },
        {
            "location": "/triggers/",
            "text": "Triggers\n\n\nTriggers are actions that can be initiated by doing something else. For example updating the stock of an item when an order has been made.\n\n\nDifferent Possibilities:\n\n\n\n\n\n\n\n\n...\n\n\nBefore\n\n\nInstead\n\n\nAfter\n\n\n\n\n\n\n\n\n\n\nDelete\n\n\nx\n\n\nx\n\n\n\n\n\n\n\n\nInsert\n\n\nx\n\n\nx\n\n\n\n\n\n\n\n\nUpdate\n\n\nx\n\n\nx\n\n\n\n\n\n\n\n\n\n\nMySQL can only use \"Before\" and \"After\".\n\n\nRules:\n\n\n\n\nThe names have to be unique\n\n\nThere must be stated on what table the trigger applies to\n\n\nAlso on what action it triggers on\n\n\nAnd when it triggers\n\n\n\n\nCREATE TRIGGER newproduct AFTER INSERT ON products\nFOR EACH ROW\n-- Placeholder for the action\n\n\n\n\nExample\n\n\nWe will create a trigger that archives a row before deleting that row.\n\n\nCREATE TRIGGER archive                     \nBEFORE DELETE ON users                        -- Before there is a delete on the table \"users\"\nFOR EACH ROW\nINSERT INTO usersarch(name, count, updated)   -- Do an insert into the archive table with the values that will be deleted\nVALUES (OLD.name, OLD.count, OLD.updated);    -- OLD. holds these values\n\n\n\n\nWith this small example we will update the timestamp in a row with the date when it was last changed.\n\n\nCREATE TRIGGER updatedate\nAFTER UPDATE ON users                          -- Trigger after there has been an update to the table \"users\"\nFOR EACH ROW                                  \nSET @updated = NOW();                          -- change the value of the row that has been updated to NOW() (Current date/time)",
            "title": "Using triggers"
        },
        {
            "location": "/triggers/#triggers",
            "text": "Triggers are actions that can be initiated by doing something else. For example updating the stock of an item when an order has been made.",
            "title": "Triggers"
        },
        {
            "location": "/triggers/#different-possibilities",
            "text": "...  Before  Instead  After      Delete  x  x     Insert  x  x     Update  x  x      MySQL can only use \"Before\" and \"After\".",
            "title": "Different Possibilities:"
        },
        {
            "location": "/triggers/#rules",
            "text": "The names have to be unique  There must be stated on what table the trigger applies to  Also on what action it triggers on  And when it triggers   CREATE TRIGGER newproduct AFTER INSERT ON products\nFOR EACH ROW\n-- Placeholder for the action",
            "title": "Rules:"
        },
        {
            "location": "/triggers/#example",
            "text": "We will create a trigger that archives a row before deleting that row.  CREATE TRIGGER archive                     \nBEFORE DELETE ON users                        -- Before there is a delete on the table \"users\"\nFOR EACH ROW\nINSERT INTO usersarch(name, count, updated)   -- Do an insert into the archive table with the values that will be deleted\nVALUES (OLD.name, OLD.count, OLD.updated);    -- OLD. holds these values  With this small example we will update the timestamp in a row with the date when it was last changed.  CREATE TRIGGER updatedate\nAFTER UPDATE ON users                          -- Trigger after there has been an update to the table \"users\"\nFOR EACH ROW                                  \nSET @updated = NOW();                          -- change the value of the row that has been updated to NOW() (Current date/time)",
            "title": "Example"
        },
        {
            "location": "/transactions/",
            "text": "Transactions\n\n\n\n\nAttention\n\n\nThis chapter is not been seen in class.",
            "title": "Managing transaction processing"
        },
        {
            "location": "/transactions/#transactions",
            "text": "Attention  This chapter is not been seen in class.",
            "title": "Transactions"
        },
        {
            "location": "/globalization-and-localization/",
            "text": "Globalization and localization\n\n\n\n\nAttention\n\n\nThis chapter is not been seen in class.",
            "title": "Globalization and localization"
        },
        {
            "location": "/globalization-and-localization/#globalization-and-localization",
            "text": "Attention  This chapter is not been seen in class.",
            "title": "Globalization and localization"
        },
        {
            "location": "/database-users/",
            "text": "Database users\n\n\nBy adding users you can add security to your database. A normal user should not be able to drop tables.\n\n\nBefore we can create a user we'll have to sign in as the root user\n\n\nmysql -u root;\n\n\n\n\nAdding a user:\n\n\nCREATE USER 'thomas' @ 'localhost'\nIDENTIFIED BY 'azerty123';\n\n\n\n\nWith these two lines you have added a new users with username \nthomas\n and password \nazerty123\n. He can only log in from the same computer where the database is running on. This is achieved by typing \nlocalhost\n, you can use this to add another layer of security by only allowing the admin to log in from localhost.\n\n\nNow we need to give this user some rights\n\n\nTo create a user in my MySQL that can access the database from any host:\n\n\nCREATE USER 'username'@'%';\n\n\n\n\n%\n is a wildcard character and specifies that the user can connect from a variable path\n\n\nLogging in:\n\n\nWe can now connect to the database using the credentials of the new user\n\n\nmysql -u username -p -h 10.177.33.192;\n\n\n\n\n-p\n specifies that the user requires a password to be filled in\n\n\n-h\n specifies that the user wants to access a database on another host\n\n\n10.177.33.192\n is the IP address of the machine with the database\n\n\nA little thing that we need to keep in mind is the root user. This users does not have a password and has al rights. When setting up a database don't forget to secure this account with a password or delete it.\n\n\nGiving rights to a user:\n\n\nGRANT ALL PRIVILIGES ON forta.products\nTO 'thomas'@'localhost';\n\n\n\n\nHere we gave the user \nthomas\n all privileges on the table \nproducts\n from the database called \nforta\n. You can replace the table with \n*\n to give access to all tables. Or you also could type \n*.*\n. The two asterisks mean access to everything.\n\n\nHere is a list of things you can place after \nGRANT\n to give only specific rights to a user.\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nALL PRIVILIGES\n\n\nYou can do anything the database allows\n\n\n\n\n\n\nCREATE\n\n\nAllows the user to create new tables or databases\n\n\n\n\n\n\nDROP\n\n\nAllows the user to delete tables or databases\n\n\n\n\n\n\nDELETE\n\n\nAllows the user to delete rows from tables\n\n\n\n\n\n\nINSERT\n\n\nAllows them to insert rows into tables\n\n\n\n\n\n\nSELECT\n\n\nAllows them to use select queries to read data from tables\n\n\n\n\n\n\nUPDATE\n\n\nAllows them to update table rows\n\n\n\n\n\n\nGRANT OPTION\n\n\nAllows them to grant and remove other users' privileges\n\n\n\n\n\n\n\n\nYou can now view the granted privileges with\n\n\nSHOW grants;\n\n\n\n\nRevoking rights of a user:\n\n\nYou can also revoke these rights. When someone abused his power over the database for example.\nThe code to do this is almost identical to that of granting the right.\n\n\nREVOKE UPDATE ON forta.products\nFROM 'thomas'@'localhost'\n\n\n\n\nDeleting users:\n\n\nWhen someone stops working at a job and they want to delete his account on the database they can do this with this line.\nIt is just like dropping tables.\n\n\nDROP USER 'thomas'@'localhost';",
            "title": "Managing database users"
        },
        {
            "location": "/database-users/#database-users",
            "text": "By adding users you can add security to your database. A normal user should not be able to drop tables.  Before we can create a user we'll have to sign in as the root user  mysql -u root;",
            "title": "Database users"
        },
        {
            "location": "/database-users/#adding-a-user",
            "text": "CREATE USER 'thomas' @ 'localhost'\nIDENTIFIED BY 'azerty123';  With these two lines you have added a new users with username  thomas  and password  azerty123 . He can only log in from the same computer where the database is running on. This is achieved by typing  localhost , you can use this to add another layer of security by only allowing the admin to log in from localhost.  Now we need to give this user some rights  To create a user in my MySQL that can access the database from any host:  CREATE USER 'username'@'%';  %  is a wildcard character and specifies that the user can connect from a variable path",
            "title": "Adding a user:"
        },
        {
            "location": "/database-users/#logging-in",
            "text": "We can now connect to the database using the credentials of the new user  mysql -u username -p -h 10.177.33.192;  -p  specifies that the user requires a password to be filled in  -h  specifies that the user wants to access a database on another host  10.177.33.192  is the IP address of the machine with the database  A little thing that we need to keep in mind is the root user. This users does not have a password and has al rights. When setting up a database don't forget to secure this account with a password or delete it.",
            "title": "Logging in:"
        },
        {
            "location": "/database-users/#giving-rights-to-a-user",
            "text": "GRANT ALL PRIVILIGES ON forta.products\nTO 'thomas'@'localhost';  Here we gave the user  thomas  all privileges on the table  products  from the database called  forta . You can replace the table with  *  to give access to all tables. Or you also could type  *.* . The two asterisks mean access to everything.  Here is a list of things you can place after  GRANT  to give only specific rights to a user.     Name  Description      ALL PRIVILIGES  You can do anything the database allows    CREATE  Allows the user to create new tables or databases    DROP  Allows the user to delete tables or databases    DELETE  Allows the user to delete rows from tables    INSERT  Allows them to insert rows into tables    SELECT  Allows them to use select queries to read data from tables    UPDATE  Allows them to update table rows    GRANT OPTION  Allows them to grant and remove other users' privileges     You can now view the granted privileges with  SHOW grants;",
            "title": "Giving rights to a user:"
        },
        {
            "location": "/database-users/#revoking-rights-of-a-user",
            "text": "You can also revoke these rights. When someone abused his power over the database for example.\nThe code to do this is almost identical to that of granting the right.  REVOKE UPDATE ON forta.products\nFROM 'thomas'@'localhost'",
            "title": "Revoking rights of a user:"
        },
        {
            "location": "/database-users/#deleting-users",
            "text": "When someone stops working at a job and they want to delete his account on the database they can do this with this line.\nIt is just like dropping tables.  DROP USER 'thomas'@'localhost';",
            "title": "Deleting users:"
        },
        {
            "location": "/database-maintenance/",
            "text": "Database maintenance\n\n\n\n\nAttention\n\n\nThis chapter is not been seen in class.",
            "title": "Database maintenance"
        },
        {
            "location": "/database-maintenance/#database-maintenance",
            "text": "Attention  This chapter is not been seen in class.",
            "title": "Database maintenance"
        },
        {
            "location": "/concurrency/",
            "text": "",
            "title": "Concurrency"
        },
        {
            "location": "/passwords/",
            "text": "Passwords",
            "title": "Storing passwords"
        },
        {
            "location": "/passwords/#passwords",
            "text": "",
            "title": "Passwords"
        },
        {
            "location": "/php-pdo/",
            "text": "PHP PDO\n\n\nPHP database extensions\n\n\nThere are several ways to interface with MySQL (or other database management systems). PHP provides 3 extensions.\n\n\nMySQL \u2013 MySQL extension\n\n\n\n\nIncluded in PHP 3.x, 4.x, 5.x\n\n\nDoes not take advantage of the new features of MySQL 4.1.3 and later\n\n\nNot under active development\n\n\nRemoved in PHP 7.0\n\n\n\n\nMySQLi \u2013 MySQL extension improved\n\n\n\n\nObject oriented AND procedural\n\n\nTakes full advantage of all the features of MySQL 4.1.3 and later\n\n\nMySQL Only!\n\n\nRemoved in PHP 7.0\n\n\n\n\nPDO \u2013 PHP Data Object\n\n\n\n\nSince PHP 5.1\n\n\nConsistent object-oriented interface\n\n\nMultiple database support (12): MySQL, MsSql, Sqlite, Oracle, IBM, Posgresql,\u2026\n\n\nPortable\n\n\nDoesn\u2019t take full advantage of all the features of MySQL 4.1.3 and later\n\n\n\n\nPHP Data Objects provide an database abstraction layer. PDO is the \nmethod of choice\n when interfacing a database in PHP.\n\n\nPDO: PHP Data Object\n\n\nPDO provides a database access layer enabling a uniform method of access to multiple databases. Changing database type does not change the PDO code. This enables switching database types without rewriting any code.\n\n\n\n\nTo get all available drivers you can use the \ngetAvailableDrivers()\n function:\n\n\nprint_r(PDO::getAvailableDrivers());\n\n\n\n\nPHP Data Objects supports the following drivers:\n\n\n\n\n\n\n\n\nDriver name\n\n\nSupported databases\n\n\n\n\n\n\n\n\n\n\nPDO_CUBRID\n\n\nCubrid\n\n\n\n\n\n\nPDO_DBLIB\n\n\nFreeTDS / Microsoft SQL Server / Sybase\n\n\n\n\n\n\nPDO_FIREBIRD\n\n\nFirebird\n\n\n\n\n\n\nPDO_IBM\n\n\nIBM DB2\n\n\n\n\n\n\nPDO_INFORMIX\n\n\nIBM Informix Dynamic Server\n\n\n\n\n\n\nPDO_MYSQL\n\n\nMySQL 3.x/4.x/5.x\n\n\n\n\n\n\nPDO_OCI\n\n\nOracle Call Interface\n\n\n\n\n\n\nPDO_ODBC\n\n\nODBC v3 (IBM DB2, unixODBC and win32 ODBC)\n\n\n\n\n\n\nPDO_PGSQL\n\n\nPostgreSQL\n\n\n\n\n\n\nPDO_SQLITE\n\n\nSQLite 3 and SQLite 2\n\n\n\n\n\n\nPDO_SQLSRV\n\n\nMicrosoft SQL Server / SQL Azure\n\n\n\n\n\n\nPDO_4D\n\n\n4D\n\n\n\n\n\n\n\n\nConnection strings\n\n\n\n\nDatabase handle\n\n\nDatabase type\n\n\nConnectionstring\n\n\nDepending on the database type\n\n\n\n\n\n\n\n\n$DBH = new PDO(\"mysql:host=$host;dbname=$dbname\", $user, $pass);\n\n\n\n\nOpening and closing connections\n\n\nOpening\n\n\ntry {\n   # MS SQL Server and Sybase with PDO_DBLIB\n   $DBH = new PDO(\"mssql:host=$host;dbname=$dbname, $usr, $pw\");\n   $DBH = new PDO(\"sybase:host=$host;dbname=$dbname, $usr, $pw\");\n\n   # MySQL with PDO_MYSQL\n   $DBH = new PDO(\"mysql:host=$host;dbname=$dbname\", $usr, $pw);\n\n   # SQLite Database\n   $DBH = new PDO(\"sqlite:my/database/path/database.db\");\n} catch(PDOException $e) {\n    echo $e->getMessage();\n}\n\n\n\n\nClosing\n\n\n$DBH = null;\n\n\n\n\nExceptions\n\n\n\n\nHandling errors\n\n\nWrap every PDO interaction in a try/catch block\n\n\n\n\nError modes\n\n\n\n\n\n\n3 error modes\n\n\n\n\n\n\nPDO::ERRMODE_SILENT\n    Default\n    No action is taken\n    Set errorcodes, available via\u000b   PDO::errorCode() and PDO::errorInfo()\n\n\n\n\nPDO::ERRMODE_WARNING\n    Raises E_WARNING\n    Show warning\n\n\nPDO::ERRMODE_EXCEPTION\n    Errorcodes will be set\n    Will throw an exception of the PDOException class\n\n\n\n\n$DBH->setAttribute( PDO::ATTR_ERRMODE, PDO::ERRMODE_SILENT );\n$DBH->setAttribute( PDO::ATTR_ERRMODE, PDO::ERRMODE_WARNING );\n$DBH->setAttribute( PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION );\n\n\n\n\nError handling\n\n\n\n\nErrorMode = PDO::ERRMODE_EXCEPTION\n\n\nAlways use Try/Catch\n\n\nGracefull error handling\n\n\nFriendly message to the user\n\n\nException details to an log file\n\n\n\n\n\n\n\n\ntry {\n   $DBH = new PDO(\"mysql:host=$host;dbname=$dbname\", $user, $pass);\n   $DBH->setAttribute( PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION );\n   # UH-OH! Typed DELECT instead of SELECT!\n   $DBH->prepare('DELECT name FROM people');\n} catch(PDOException $e) {\n   echo \"I'm sorry. I'm afraid I can't do that.\";\n   file_put_contents('PDOErrors.txt', $e->getMessage(), FILE_APPEND);\n}\n\n\n\n\nInserting and updating data\n\n\nInserting and updating data follows a \ntwo-step process\n:\n\n\n\n\nPrepare\n\n\nExecute\n\n\n\n\n# STH means \"Statement Handle\"\n$STH = $DBH->prepare(\n   \"INSERT INTO folks ( first_name ) values ( 'Cathy' )\"\n);\n$STH->execute();\n\n\n\n\nAn additional 'bind' step can be added by using prepared statements.\n\n\n\n\nPrepared statements\n\n\nPrepared statements make use of \nprecompiled SQL statements\n.\nThese statements can be \nexecuted multiple times\n.\nPrepared statements have the benefit of automatically making data \u201csafe\u201d by\n\nprotecting against SQL injection\n. This is accomplished by making use of \nplaceholders\n.\n\n\nPHP Data Objects support two types of placeholders. Named and unnamed placeholders.\n\n\n\n\nUnsafe data\n\n\nAll data inserted by the user of an website (eg: filling in a form, search text,\nor anything other that is not hard-coded into PHP) is considered unsafe!\n\n\n\n\n# no placeholders - ripe for SQL Injection!\n$STH = $DBH->(\"INSERT INTO folks (name, addr, city) values ($name, $addr, $city)\");\n\n# unnamed placeholders\n$STH = $DBH->(\"INSERT INTO folks (name, addr, city) values (?, ?, ?)\u201d;\n\n# named placeholders\n$STH = $DBH->(\"INSERT INTO folks (name, addr, city) value (:name, :addr, :city)\");\n\n\n\n\nUnnamed placeholders\n\n\nWrite queries just like before, but instead of inserting the \"unsafe\" data as parts\nof the query string, place a question mark sign \n?\n as placeholder for the data.\nThe unsafe data is then passed to the \nexecute()\n method as an array. The indexes of\nthe array must correspond with the place of the question mark.\nThe array MUST be indexed in the right order.\n\n\nStatements can be reused by passing in other arrays with different data with\nthe \nexecute()\n method.\n\n\n# the data we want to insert\n$data = array('Cathy', '9 Dark and Twisty Road', 'Cardiff');\n$STH = $DBH->(\"INSERT INTO folks (name, addr, city) values (?, ?, ?);\n$STH->execute($data);\n\n\n\n\nNamed placeholders\n\n\nInstead of using question marks as placeholder, a named placeholder is used.\nA placeholder starts with an colon sign: \n:\n followed by an name. When passing\nthe data array to the \nexecute()\n method, an associative array must be used.\nThe associative indexes of the array must then correspond with the names of the\nplaceholders.\nThe advantage is that the array indexes can be out of order.\n\n\n# the data we want to insert\n$data = array(\n   'name' => 'Cathy', 'addr' => '9 Dark and Twisty', 'city' => 'Cardiff'\n);\n\n# the shortcut!\n$STH = $DBH->(\"INSERT INTO folks (name, addr, city)\n   value (:name, :addr, :city)\");\n$STH->execute($data);\n\n\n\n\nSelecting data\n\n\nPHP Data Objects enable to select and retrieve results in different ways.\nResults can be fetched as:\n\n\n\n\nAssociative array\n\n\nObjects of type stdClass\n\n\nObjects of a predefined class\n\n\n...\n\n\n\n\nThe fetch mode can be set with the \nsetFetchMode()\n function:\n\n\n// Fetch results as an associative array\n$STH->setFetchMode(PDO::FETCH_ASSOC);\n\n// Fetch results as objects of type stdClass\n$STH->setFetchMode(PDO::FETCH_OBJ);\n\n// Fetch results as objects of type MyClass\n$STH->setFetchMode(PDO::FETCH_CLASS, 'MyClass');\n\n\n\n\n\n\nstdClass\n\n\nstdClass is PHP's generic empty class, kind of like Object in Java or object in Python.\nstdClass is not used as universal base class like Object in Java.\n\n\n\n\nFetch as associative array\n\n\nReturn results in an associative array\nIndexed by column name\n\n\nPDO::FETCH_ASSOC\n\n\n# using the shortcut ->query() method here since there\n# are no variable values in the select statement.\n$STH = $DBH->query('SELECT name, addr, city from folks');\n\n# setting the fetch mode\n$STH->setFetchMode(PDO::FETCH_ASSOC);\nwhile($row = $STH->fetch()) {\n   echo $row['name'] . \"\\n\";\n   echo $row['addr'] . \"\\n\";\n   echo $row['city'] . \"\\n\";\n}\n\n\n\n\nFetch as object of type stdClass\n\n\nReturn results in an object of std class for each row of fetched data\n\n\n# creating the statement\n$STH = $DBH->query('SELECT name, addr, city from folks');\n\n# setting the fetch mode\n$STH->setFetchMode(PDO::FETCH_OBJ);\n# showing the results while($row = $STH->fetch()) {\n   echo $row->name . \"\\n\";\n   echo $row->addr . \"\\n\";\n   echo $row->city . \"\\n\";\n}\n\n\n\n\nFetch as object of a predefined class\n\n\nFetch data directly into a class of choosing\nProperties are set before the constructor is called\nProperty names will match column names\nIf property does not match it will be created\n\n\n$STH->setFetchMode(PDO::FETCH_CLASS, \u2018classname');\n\n\n\n\n$STH->setFetchMode(\u000b   PDO::FETCH_CLASS, 'secret_person', array('stuff'));\n\n\n\n\nclass secret_person {\n   public $name;\n   public $addr;\n   public $city;\n   public $other_data;\n   function __construct($other = '') {\n      $this->address = preg_replace('/[a-z]/', 'x', $this->address);\n      $this->other_data = $other;\n   }\n}\n\n\n\n\n$STH = $DBH->query('SELECT name, addr, city from folks');\n$STH->setFetchMode(PDO::FETCH_CLASS, 'secret_person');\nwhile($obj = $STH->fetch()) {\n   echo $obj->addr;\n}\n\n\n\n\nHelpful methods",
            "title": "PHP PDO's"
        },
        {
            "location": "/php-pdo/#php-pdo",
            "text": "",
            "title": "PHP PDO"
        },
        {
            "location": "/php-pdo/#php-database-extensions",
            "text": "There are several ways to interface with MySQL (or other database management systems). PHP provides 3 extensions.",
            "title": "PHP database extensions"
        },
        {
            "location": "/php-pdo/#mysql-mysql-extension",
            "text": "Included in PHP 3.x, 4.x, 5.x  Does not take advantage of the new features of MySQL 4.1.3 and later  Not under active development  Removed in PHP 7.0",
            "title": "MySQL \u2013 MySQL extension"
        },
        {
            "location": "/php-pdo/#mysqli-mysql-extension-improved",
            "text": "Object oriented AND procedural  Takes full advantage of all the features of MySQL 4.1.3 and later  MySQL Only!  Removed in PHP 7.0",
            "title": "MySQLi \u2013 MySQL extension improved"
        },
        {
            "location": "/php-pdo/#pdo-php-data-object",
            "text": "Since PHP 5.1  Consistent object-oriented interface  Multiple database support (12): MySQL, MsSql, Sqlite, Oracle, IBM, Posgresql,\u2026  Portable  Doesn\u2019t take full advantage of all the features of MySQL 4.1.3 and later   PHP Data Objects provide an database abstraction layer. PDO is the  method of choice  when interfacing a database in PHP.",
            "title": "PDO \u2013 PHP Data Object"
        },
        {
            "location": "/php-pdo/#pdo-php-data-object_1",
            "text": "PDO provides a database access layer enabling a uniform method of access to multiple databases. Changing database type does not change the PDO code. This enables switching database types without rewriting any code.   To get all available drivers you can use the  getAvailableDrivers()  function:  print_r(PDO::getAvailableDrivers());  PHP Data Objects supports the following drivers:     Driver name  Supported databases      PDO_CUBRID  Cubrid    PDO_DBLIB  FreeTDS / Microsoft SQL Server / Sybase    PDO_FIREBIRD  Firebird    PDO_IBM  IBM DB2    PDO_INFORMIX  IBM Informix Dynamic Server    PDO_MYSQL  MySQL 3.x/4.x/5.x    PDO_OCI  Oracle Call Interface    PDO_ODBC  ODBC v3 (IBM DB2, unixODBC and win32 ODBC)    PDO_PGSQL  PostgreSQL    PDO_SQLITE  SQLite 3 and SQLite 2    PDO_SQLSRV  Microsoft SQL Server / SQL Azure    PDO_4D  4D",
            "title": "PDO: PHP Data Object"
        },
        {
            "location": "/php-pdo/#connection-strings",
            "text": "Database handle  Database type  Connectionstring  Depending on the database type     $DBH = new PDO(\"mysql:host=$host;dbname=$dbname\", $user, $pass);",
            "title": "Connection strings"
        },
        {
            "location": "/php-pdo/#opening-and-closing-connections",
            "text": "Opening  try {\n   # MS SQL Server and Sybase with PDO_DBLIB\n   $DBH = new PDO(\"mssql:host=$host;dbname=$dbname, $usr, $pw\");\n   $DBH = new PDO(\"sybase:host=$host;dbname=$dbname, $usr, $pw\");\n\n   # MySQL with PDO_MYSQL\n   $DBH = new PDO(\"mysql:host=$host;dbname=$dbname\", $usr, $pw);\n\n   # SQLite Database\n   $DBH = new PDO(\"sqlite:my/database/path/database.db\");\n} catch(PDOException $e) {\n    echo $e->getMessage();\n}  Closing  $DBH = null;",
            "title": "Opening and closing connections"
        },
        {
            "location": "/php-pdo/#exceptions",
            "text": "Handling errors  Wrap every PDO interaction in a try/catch block",
            "title": "Exceptions"
        },
        {
            "location": "/php-pdo/#error-modes",
            "text": "3 error modes    PDO::ERRMODE_SILENT\n    Default\n    No action is taken\n    Set errorcodes, available via\u000b   PDO::errorCode() and PDO::errorInfo()   PDO::ERRMODE_WARNING\n    Raises E_WARNING\n    Show warning  PDO::ERRMODE_EXCEPTION\n    Errorcodes will be set\n    Will throw an exception of the PDOException class   $DBH->setAttribute( PDO::ATTR_ERRMODE, PDO::ERRMODE_SILENT );\n$DBH->setAttribute( PDO::ATTR_ERRMODE, PDO::ERRMODE_WARNING );\n$DBH->setAttribute( PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION );",
            "title": "Error modes"
        },
        {
            "location": "/php-pdo/#error-handling",
            "text": "ErrorMode = PDO::ERRMODE_EXCEPTION  Always use Try/Catch  Gracefull error handling  Friendly message to the user  Exception details to an log file     try {\n   $DBH = new PDO(\"mysql:host=$host;dbname=$dbname\", $user, $pass);\n   $DBH->setAttribute( PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION );\n   # UH-OH! Typed DELECT instead of SELECT!\n   $DBH->prepare('DELECT name FROM people');\n} catch(PDOException $e) {\n   echo \"I'm sorry. I'm afraid I can't do that.\";\n   file_put_contents('PDOErrors.txt', $e->getMessage(), FILE_APPEND);\n}",
            "title": "Error handling"
        },
        {
            "location": "/php-pdo/#inserting-and-updating-data",
            "text": "Inserting and updating data follows a  two-step process :   Prepare  Execute   # STH means \"Statement Handle\"\n$STH = $DBH->prepare(\n   \"INSERT INTO folks ( first_name ) values ( 'Cathy' )\"\n);\n$STH->execute();  An additional 'bind' step can be added by using prepared statements.",
            "title": "Inserting and updating data"
        },
        {
            "location": "/php-pdo/#prepared-statements",
            "text": "Prepared statements make use of  precompiled SQL statements .\nThese statements can be  executed multiple times .\nPrepared statements have the benefit of automatically making data \u201csafe\u201d by protecting against SQL injection . This is accomplished by making use of  placeholders .  PHP Data Objects support two types of placeholders. Named and unnamed placeholders.   Unsafe data  All data inserted by the user of an website (eg: filling in a form, search text,\nor anything other that is not hard-coded into PHP) is considered unsafe!   # no placeholders - ripe for SQL Injection!\n$STH = $DBH->(\"INSERT INTO folks (name, addr, city) values ($name, $addr, $city)\");\n\n# unnamed placeholders\n$STH = $DBH->(\"INSERT INTO folks (name, addr, city) values (?, ?, ?)\u201d;\n\n# named placeholders\n$STH = $DBH->(\"INSERT INTO folks (name, addr, city) value (:name, :addr, :city)\");",
            "title": "Prepared statements"
        },
        {
            "location": "/php-pdo/#unnamed-placeholders",
            "text": "Write queries just like before, but instead of inserting the \"unsafe\" data as parts\nof the query string, place a question mark sign  ?  as placeholder for the data.\nThe unsafe data is then passed to the  execute()  method as an array. The indexes of\nthe array must correspond with the place of the question mark.\nThe array MUST be indexed in the right order.  Statements can be reused by passing in other arrays with different data with\nthe  execute()  method.  # the data we want to insert\n$data = array('Cathy', '9 Dark and Twisty Road', 'Cardiff');\n$STH = $DBH->(\"INSERT INTO folks (name, addr, city) values (?, ?, ?);\n$STH->execute($data);",
            "title": "Unnamed placeholders"
        },
        {
            "location": "/php-pdo/#named-placeholders",
            "text": "Instead of using question marks as placeholder, a named placeholder is used.\nA placeholder starts with an colon sign:  :  followed by an name. When passing\nthe data array to the  execute()  method, an associative array must be used.\nThe associative indexes of the array must then correspond with the names of the\nplaceholders.\nThe advantage is that the array indexes can be out of order.  # the data we want to insert\n$data = array(\n   'name' => 'Cathy', 'addr' => '9 Dark and Twisty', 'city' => 'Cardiff'\n);\n\n# the shortcut!\n$STH = $DBH->(\"INSERT INTO folks (name, addr, city)\n   value (:name, :addr, :city)\");\n$STH->execute($data);",
            "title": "Named placeholders"
        },
        {
            "location": "/php-pdo/#selecting-data",
            "text": "PHP Data Objects enable to select and retrieve results in different ways.\nResults can be fetched as:   Associative array  Objects of type stdClass  Objects of a predefined class  ...   The fetch mode can be set with the  setFetchMode()  function:  // Fetch results as an associative array\n$STH->setFetchMode(PDO::FETCH_ASSOC);\n\n// Fetch results as objects of type stdClass\n$STH->setFetchMode(PDO::FETCH_OBJ);\n\n// Fetch results as objects of type MyClass\n$STH->setFetchMode(PDO::FETCH_CLASS, 'MyClass');   stdClass  stdClass is PHP's generic empty class, kind of like Object in Java or object in Python.\nstdClass is not used as universal base class like Object in Java.",
            "title": "Selecting data"
        },
        {
            "location": "/php-pdo/#fetch-as-associative-array",
            "text": "Return results in an associative array\nIndexed by column name  PDO::FETCH_ASSOC  # using the shortcut ->query() method here since there\n# are no variable values in the select statement.\n$STH = $DBH->query('SELECT name, addr, city from folks');\n\n# setting the fetch mode\n$STH->setFetchMode(PDO::FETCH_ASSOC);\nwhile($row = $STH->fetch()) {\n   echo $row['name'] . \"\\n\";\n   echo $row['addr'] . \"\\n\";\n   echo $row['city'] . \"\\n\";\n}",
            "title": "Fetch as associative array"
        },
        {
            "location": "/php-pdo/#fetch-as-object-of-type-stdclass",
            "text": "Return results in an object of std class for each row of fetched data  # creating the statement\n$STH = $DBH->query('SELECT name, addr, city from folks');\n\n# setting the fetch mode\n$STH->setFetchMode(PDO::FETCH_OBJ);\n# showing the results while($row = $STH->fetch()) {\n   echo $row->name . \"\\n\";\n   echo $row->addr . \"\\n\";\n   echo $row->city . \"\\n\";\n}",
            "title": "Fetch as object of type stdClass"
        },
        {
            "location": "/php-pdo/#fetch-as-object-of-a-predefined-class",
            "text": "Fetch data directly into a class of choosing\nProperties are set before the constructor is called\nProperty names will match column names\nIf property does not match it will be created  $STH->setFetchMode(PDO::FETCH_CLASS, \u2018classname');  $STH->setFetchMode(\u000b   PDO::FETCH_CLASS, 'secret_person', array('stuff'));  class secret_person {\n   public $name;\n   public $addr;\n   public $city;\n   public $other_data;\n   function __construct($other = '') {\n      $this->address = preg_replace('/[a-z]/', 'x', $this->address);\n      $this->other_data = $other;\n   }\n}  $STH = $DBH->query('SELECT name, addr, city from folks');\n$STH->setFetchMode(PDO::FETCH_CLASS, 'secret_person');\nwhile($obj = $STH->fetch()) {\n   echo $obj->addr;\n}",
            "title": "Fetch as object of a predefined class"
        },
        {
            "location": "/php-pdo/#helpful-methods",
            "text": "",
            "title": "Helpful methods"
        },
        {
            "location": "/er-diagram/",
            "text": "Entity-Relation Diagrams",
            "title": "Entity-Relation Diagram"
        },
        {
            "location": "/er-diagram/#entity-relation-diagrams",
            "text": "",
            "title": "Entity-Relation Diagrams"
        },
        {
            "location": "/mysql-datatypes/",
            "text": "MySQL datatypes\n\n\n+----------------+---------+\n| prod_name      | prod_id |\n+----------------+---------+\n| .5 ton anvil   | ANV01   |\n| 1 ton anvil    | ANV02   |\n| 2 ton anvil    | ANV03   |\n| Detonator      | DTNTR   |\n| Bird seed      | FB      |\n| Carrots        | FC      |\n| Fuses          | FU1     |\n| JetPack 1000   | JP1000  |\n| JetPack 2000   | JP2000  |\n| Oil can        | OL1     |\n| Safe           | SAFE    |\n| Sling          | SLING   |\n| TNT (1 stick)  | TNT1    |\n| TNT (5 sticks) | TNT2    |\n+----------------+---------+",
            "title": "MySQL datatypes"
        },
        {
            "location": "/mysql-datatypes/#mysql-datatypes",
            "text": "+----------------+---------+\n| prod_name      | prod_id |\n+----------------+---------+\n| .5 ton anvil   | ANV01   |\n| 1 ton anvil    | ANV02   |\n| 2 ton anvil    | ANV03   |\n| Detonator      | DTNTR   |\n| Bird seed      | FB      |\n| Carrots        | FC      |\n| Fuses          | FU1     |\n| JetPack 1000   | JP1000  |\n| JetPack 2000   | JP2000  |\n| Oil can        | OL1     |\n| Safe           | SAFE    |\n| Sling          | SLING   |\n| TNT (1 stick)  | TNT1    |\n| TNT (5 sticks) | TNT2    |\n+----------------+---------+",
            "title": "MySQL datatypes"
        }
    ]
}